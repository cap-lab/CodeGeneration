#ifndef __CIC_PORT_H__
#define __CIC_PORT_H__

int init_port(int task_id, int port_id);
int init_task_port(int task_id, const char* port_name);
//hsh int read_port(int channel_index, unsigned char *buf, int len);
//hsh int write_port(int channel_index, unsigned char *buf, int len);
int available(int channel_index);
//hsh int read_acport(int channel_id, unsigned char *buf, int len, int index);
//hsh int write_acport(int channel_id, unsigned char *buf, int len, int index);
int check_acport(int channel_id);
int read_buport(int channel_index, unsigned char* buf, int len);
int write_buport(int channel_index, unsigned char* buf, int len);

//hsh int write_scheduler(const char* buf);

#define MQ_RECEIVE(a, b, c) read_port(a, (unsigned char *)b, c)
#define MQ_SEND(a, b, c) write_port(a, (unsigned char *)b, c)
#define AC_RECEIVE(a, b, c, d) read_acport(a, (unsigned char *)b, c, d)
#define AC_SEND(a, b, c, d) write_acport(a, (unsigned char *)b, c, d)
#define AC_CHECK(a) check_acport(a)
#define MQ_AVAILABLE(a) available(a)
#define BUF_RECEIVE(a, b, c) read_buport(a, (unsigned char *)b, c)
#define BUF_SEND(a, b, c) write_buport(a, (unsigned char *)b, c)

long get_param_int(char* caller_task_name, char* t_name, char* p_name);
void set_param_int(char* caller_task_name, char* t_name, char* p_name, long p_value);
//hsh double get_param_float(char* caller_task_name, char* t_name, char* p_name);
void set_param_float(char* caller_task_name, char* t_name, char* p_name, float p_value);
void run_task(char* caller_task_name, char* t_name);
void call_task(char* caller_task_name, char* t_name);

int set_timer(char* caller_task_name, unsigned int time_offset,  unsigned char* time_unit);
int get_timer_alarmed(char* caller_task_name, unsigned int timer_id);
void reset_timer(char* caller_task_name, unsigned int timer_id);
void program_kill();
void program_stop();

void stop_task(char* caller_task_name, char* t_name);
void execute_transition(char* caller_task_name, char* t_name);
void set_mtm_param_int(char* caller_task_name, char* t_name, char* p_name, long p_value);
void set_mtm_param_string(char* caller_task_name, char* t_name, char* p_name, char* p_value);
//hsh char* get_mode(char* caller_task_name, char* t_name);

void suspend_task(char* caller_task_name, char* t_name);
void resume_task(char* caller_task_name, char* t_name);
int check_task_state(char* caller_task_name, char* t_name);

#define SYS_REQ_GET_PARAM_INT(a, b) get_param_int(TASK_NAME, a, b)
#define SYS_REQ_SET_PARAM_INT(a, b, c) set_param_int(TASK_NAME, a, b, c)
#define SYS_REQ_GET_PARAM_FLOAT(a, b) get_param_float(TASK_NAME, a, b)
#define SYS_REQ_SET_PARAM_FLOAT(a, b, c) set_param_float(TASK_NAME, a, b, c)
#define SYS_REQ_RUN_TASK(a) run_task(TASK_NAME, a)
#define SYS_REQ_CALL_TASK(a) call_task(TASK_NAME, a)
#define SYS_REQ_SET_TIMER(a, b) set_timer(TASK_NAME, a, b)
#define SYS_REQ_GET_TIMER_ALARMED(a) get_timer_alarmed(TASK_NAME, a)
#define SYS_REQ_RESET_TIMER(a) reset_timer(TASK_NAME, a)
#define SYS_REQ_KILL() program_kill()
#define SYS_REQ_STOP() program_stop()

#define SYS_REQ_STOP_TASK(a) stop_task(TASK_NAME, a)
#define SYS_REQ_EXECUTE_TRANSITION(a) execute_transition(TASK_NAME, a)
#define SYS_REQ_SET_MTM_PARAM_INT(a, b, c) set_mtm_param_int(TASK_NAME, a, b, c)
#define SYS_REQ_SET_MTM_PARAM_STRING(a, b, c) set_mtm_param_string(TASK_NAME, a, b, c)
#define SYS_REQ_GET_MODE(a) get_mode(TASK_NAME, a)

#define SYS_REQ_SUSPEND_TASK(a) suspend_task(TASK_NAME, a)
#define SYS_REQ_RESUME_TASK(a) resume_task(TASK_NAME, a)
#define SYS_REQ_CHECK_TASK_STATE(a) check_task_state(TASK_NAME, a)

#endif /* __CIC_PORT_H__ */