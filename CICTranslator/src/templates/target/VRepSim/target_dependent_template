##TARGET_DEPENDENT_INCLUDE_HEADERS_START
#include "target_specific.h"
##TARGET_SPECIFIC_INCLUDE_HEADER
##TARGET_DEPENDENT_SPECIFIC_DEFINE_NUM
int clientID[CLIENT_NUM] = {0, };	
##TARGET_DEPENDENT_SPECIFIC_INCLUDE
##TARGET_DEPENDENT_INCLUDE_HEADERS_END

##TARGET_DEPENDENT_IMPLEMENTATION_START
int target_dependent_init(int argc, char* argv[])
{

##TARGET_DEPENDENT_SPECIFIC_INIT_IMPLEMENTATION
	
    return(0);
}

##TARGET_DEPENDENT_SPECIFIC_IMPLEMENTATION

int go_forward()
{
##TARGET_DEPENDENT_SPECIFIC_API_GO_IMPLEMENTATION
}

int stop()
{
##TARGET_DEPENDENT_SPECIFIC_API_STOP_IMPLEMENTATION
}

int go_backward()
{
##TARGET_DEPENDENT_SPECIFIC_API_GOBACK_IMPLEMENTATION
}

int turn(int direction, int angle)
{
##TARGET_DEPENDENT_SPECIFIC_API_TURN_IMPLEMENTATION
}

int locate_point(char* xyz, int xyzSize)
{
##TARGET_DEPENDENT_SPECIFIC_API_LOCATE_POINT_IMPLEMENTATION
}
/*
int get_vision_img(simxInt* width, simxInt* height,simxUChar* image)
{
	int option = 0;
	int resolution[2] = {0,};
	if (clientID[2]!=-1)
	{		
		simxGetVisionSensorImage(clientID[2], cameraHandle, resolution, &image, option, simx_opmode_streaming);
		if(simxGetConnectionId(clientID[2])!=-1)
		{
			int i, j, k;
			if(simxGetVisionSensorImage(clientID[2], cameraHandle, resolution, &image, option, simx_opmode_buffer) == simx_return_ok)
			{
				for(i = 0; i < resolution[1]; i++)	//row y
				{
					for(j = 0; j < resolution[0]; j++)	//row x
					{
						for(k = 0; k < 3; k++)
						{
							simxUChar col = image[(i*resolution[0]+j)*3+k];
							//printf("%d", col);
							//if(k !=2) printf(",");
						}
						//printf("\t");
					}
					//printf("\n");
				}
				width = &resolution[0];
				height = &resolution[1];
				return 1;				
			}			
		}
	    else
        {
            printf("Color::[ERROR] can not get connection id!!\n");
            return 0; 
        }
    }   
    else
    {
        printf("Color::[ERROR] cleintID[2] == -1\n");
        return 0;
    }
}
*/
int meet_obstacle()
{	
##TARGET_DEPENDENT_SPECIFIC_API_MEET_OBSTACLE_IMPLEMENTATION	
}

void target_dependent_wrapup()
{
	int i;
	for(i = 0; i < CLIENT_NUM; i++)
	{
		if (clientID[i]!=-1)
	    {
	        simxFinish(clientID[i]);
	    }
	}  
}
##TARGET_DEPENDENT_IMPLEMENTATION_END

