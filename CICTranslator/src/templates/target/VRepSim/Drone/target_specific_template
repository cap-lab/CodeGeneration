##TARGET_SPECIFIC_INCLUDE_HEADER_START
//#include "target_library.h"
#include <string>
#include <iostream>
using namespace std;
##TARGET_SPECIFIC_INCLUDE_HEADER_END

##TARGET_SPECIFIC_HANDLER_START
extern int cameraHandle;

##TARGET_SPECIFIC_HANDLER_END

##GET_HANDLE_MOTOR_SENSOR_START
local cameraSensor=simGetObjectHandle("DroneSensingCamera") --[[ Handle of the proximity sensor ]]
##GET_HANDLE_MOTOR_SENSOR_END

##REMOTE_API_START_W_PORT_START
for i = 0, 1, 1 do --[[for(i = 0 ; i <= 1(=CLIENT_NUM-1); i++)]]
		simExtRemoteApiStart(portNb + (i*1000))
	end
##REMOTE_API_START_W_PORT_END

##LAUNCH_CLIENT_APP_START
result=simLaunchExecutable('proc',portNb.." "..cameraSensor,0) 
	-- set the last argument to 1 to see the console of the launched client
##LAUNCH_CLIENT_APP_END

##DISPLAY_ERROR_MESSAGE_START
simDisplayDialog('Error',"'proc' could not be launched. &&nSimulation will not run properly",sim_dlgstyle_ok,true,nil,{0.8,0,0,0,0,0},{0.5,0,0,1,1,1})
##DISPLAY_ERROR_MESSAGE_END

##HANDLE_CMD_FROM_PROC_START
	local commands=simGetStringSignal('commandsFromRemoteApiClient') -- Read commands sent from a remote API client
	if commands then
		simClearStringSignal('commandsFromRemoteApiClient') -- Clear the signal
		-- Process the commands in following loop:
		while #commands>0 do
			targetPos=simGetObjectPosition(targetObj,-1)
	
			local cmdID=simUnpackInts(commands,0,1)[1]
	 		local cmdCounter=simUnpackInts(commands,1,1)[1]
			local cmdLength=simUnpackInts(commands,2,1)[1]
			local cmdData=''
			if cmdLength>12 then
				cmdData=string.sub(commands,13,13+cmdLength-12)
			end
			commands=string.sub(commands,cmdLength+1) -- this contains the next commands
	
			-- Actuate(Move) Command
			if cmdID==1 then
			-- We have to process the command with ID 1, in this example, create a dummy object at coordinates specified in cmdData:
				local nameSize = #cmdData - 12
				local position = simUnpackFloats(cmdData, 0, 0, nameSize)
	
				position[1] = position[1] + targetPos[1]
				position[2] = position[2] + targetPos[2]
				position[3] = position[3] + targetPos[3]
				simSetObjectPosition(targetObj,-1,position)
			end		
		end	--[[ while end ]]
	end
##HANDLE_CMD_FROM_PROC_END

##TARGET_DEPENDENT_SPECIFIC_INCLUDE_START
int cameraHandle;
//float motorSpeeds[2];	//for API
##TARGET_DEPENDENT_SPECIFIC_INCLUDE_END

##TARGET_DEPENDENT_SPECIFIC_DEFINE_NUM_START
#define TARGET_PARAM_NUM 2
#define CLIENT_NUM 2
//0: actuate(V-REP Comm), 1:camera
#define CLIENT_CMD 0
#define CLIENT_CAMERA 1
##TARGET_DEPENDENT_SPECIFIC_DEFINE_NUM_END

##TARGET_DEPENDENT_SPECIFIC_INIT_IMPLEMENTATION_START
	int i;
    int portNb = 19999;
        
    if (argc>= TARGET_PARAM_NUM)
    {
        portNb=atoi(argv[1]);
		cameraHandle=atoi(argv[2]);
    }
    else
    {
        printf("Indicate following arguments: 'portNumber cameraSensorHandle'!\n");
        extApi_sleepMs(5000);
        return 0;
    }
    
    for(i = 0; i < CLIENT_NUM; i++)
	{
		clientID[i]=simxStart((simxChar*)"127.0.0.1", portNb+(i*1000) ,true,true,2000,5);
	}
    
    for(i = 0 ; i < CLIENT_NUM; i++)
	{
		if(clientID[i] != -1)
	    {
	        printf("[[simxStart Success!!::ID: %d]]\n", clientID[i]);
	    }
	    else
	    {
	    	printf("[[simxStart FAIL!!::ID: %d]]\n", clientID[i]);
	    	sleep(10000);
	    }	    
	}
		
##TARGET_DEPENDENT_SPECIFIC_INIT_IMPLEMENTATION_END

##TARGET_DEPENDENT_SPECIFIC_IMPLEMENTATION_START
std::string getCmdString(int id,int cnt,std::string& data)
{
	int length = 12 + int(data.size());
	int header[3] = {id, cnt, length};
	std::string retData((char*)header, sizeof(int) * 3);
	
	return(retData + data);
}
##TARGET_DEPENDENT_SPECIFIC_IMPLEMENTATION_END

##TARGET_DEPENDENT_SPECIFIC_API_LOCATE_POINT_IMPLEMENTATION_START
	int cmdID = 0;
	int cmdCnt = 0;
	if(clientID[CLIENT_CMD] != -1)
	{
		cmdID = 1;
		std::string cmdData = std::string((char*)xyz, xyzSize);
		std::string stringToSend = getCmdString(cmdID, cmdCnt, cmdData);
		simxWriteStringStream(clientID[CLIENT_CMD], "commandsFromRemoteApiClient", (simxUChar*)stringToSend.c_str(), (int)stringToSend.size(), simx_opmode_oneshot);
		cmdCnt++;
	}
	else
		printf("client_ID[CLIENT_CMD] is WRONG!\n"); 
##TARGET_DEPENDENT_SPECIFIC_API_LOCATE_POINT_IMPLEMENTATION_END

