#include <iostream>
#include <systemc.h>
#include "kernel/KernelFactory.h"
#include "kernel/systemc/SCControl.h"
#include "kernel/systemc/SCKernel.h"
#include "kernel/systemc/DebugThread.h"
#include "kernel/AbstractPort.h"

#include "memory/systemc/SCMemory.h"
#include "processor/systemc/ARMProcessorSC.h"
#include "bus/scbus/SCAMBABus.h"
#include "bus/scbus/SCAPBBus.h"
#include "peripheral/systemc/SCTimer.h"
#include "peripheral/systemc/SCTFTLCD.h"
#include "peripheral/systemc/SCLock.h"
#include "peripheral/systemc/SCIntrCtrl.h"
#include "etc/systemc/SCVCC.h"
#include "etc/systemc/SCClockGen.h"

using namespace std;

int sc_main(int argc, char** argv)
{
    cout << "------------------------------------------------------" << endl;
    cout << "RVARMulator test..." << endl;
    cout << "------------------------------------------------------" << endl;


    //---------------------------------------------------
    // CREATE KERNEL
    //---------------------------------------------------
    cout << "\tCreate Simulation kernel..." << endl;
    SCKernel* pKernel = (SCKernel*)KernelFactory::create("SYSTEMC");
    pKernel->setDesignFileName("RVARMulator");
    pKernel->setDesignName("RVARMulator");

    //---------------------------------------------------
    // CREATE INSTANCE
    //---------------------------------------------------
    cout << "\tCreate component instances..." << endl;
    SCAMBABus           ahbBus("AHBBus");
    SCAPBBus            apbBus("APBBus");
##ARMPROCESSOR_SC
    SCClockGen          clock("CLOCK");
    SCMemory            ahbMemory("ahbMemory");
    SCVCC               vcc("VCC");
    SCLock              lock("Lock");
##SC_INTR_CTRL
    
##PROC_SET_PARENT

    //---------------------------------------------------
    // CONNECTION
    //---------------------------------------------------
    sc_signal<bool> signal;
##SC_SIGNAL_IRQ_FIQ

    cout << "Connecting..." << endl;
    AbstractSlavePort* pPort;

##PROC_BUS_PORT
    
    pPort = (AbstractSlavePort*)ahbMemory.findPortWithName("slave");
    pPort->base = 0x10000000;
    pPort->size = 0x800000;     // 8MB
    ahbBus.slave_port(ahbMemory);
##PROC_CLOCK
    
    vcc.output(signal);
##PROC_IRQ_FIQ

    ahbBus.clock(clock.clock);

    ahbMemory.clock(clock.clock);
    
    // LOCK
    lock.clock(clock.clock);
    
    pPort = (AbstractSlavePort*)lock.findPortWithName("slave");
    pPort->base = 0x10900000;
    pPort->size = 0x100000;
    ahbBus.slave_port(lock);

    // APB
    pPort = (AbstractSlavePort*)apbBus.findPortWithName("ahb_slave");
    pPort->base = 0x10A00000;
    pPort->size = 0x100000;
    ahbBus.slave_port(apbBus);
    apbBus.h_clock(clock.clock);
    apbBus.p_clock(clock.clock);

##INTC_DEFINITION

    SCControl* control = ((SCKernel*)pKernel)->getControl();
    control->clock(clock.clock);


    //---------------------------------------------------
    // SETTING
    //---------------------------------------------------
##PROC_DEFINITION

    ahbBus.setParameter("profiler", "false");

    //---------------------------------------------------
    // INITIALIZE
    //---------------------------------------------------
    cout << "Initialize..." << endl;
    pKernel->onInitialize();
##PROC_INITIALIZE
    ahbBus.onInitialize();
    apbBus.onInitialize();
##INTC_INITIALIZE
    clock.onInitialize();
    ahbMemory.onInitialize();
    vcc.onInitialize();
    lock.onInitialize();

    pKernel->OnStart();

    pKernel->addParameter("remote_ui_port", "9000");
    //pKernel->beginUIThread();

    //---------------------------------------------------
    // RUN SIMULATION
    //---------------------------------------------------
    cout << "Staring simulation..." << endl;

    sc_start();

    //pKernel->endUIThread();

    //---------------------------------------------------
    // END SIMULATION
    //---------------------------------------------------
    pKernel->OnExit();
##DESTROY
    pKernel->onDestroy();
    delete pKernel;

    return 0;
}
