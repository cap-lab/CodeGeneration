##EXECUTE_TASKS_START
#ifdef LIB_WRAPPER
THREAD_FUNC_RET_TYPE lib_wrapper_routine(THREAD_FUNC_ARG_TYPE pdata){
    int wrapper_index = (int)pdata;

    lib_wrappers[wrapper_index].init();
    lib_wrappers[wrapper_index].go();
    lib_wrappers[wrapper_index].wrapup();
}
#endif

static void execute_tasks(void)
{
	int i=0;

    printf("\n------ Task thread create information ------\n");
    for(i=0; i<num_tasks; i++)
    {
        if(tasks[i].task_type == Control){
            control_task_total_count++;
	        printf("%s task thread (Control) is created!\n", tasks[i].name);

		    if(tasks[i].driven_type == TimeDriven){
	            THREAD_CREATE(&(tasks[i].thread), time_task_routine, (void *)tasks[i].task_id);
	            num_time_task++;
	        }
	        else if(tasks[i].driven_type == DataDriven || tasks[i].driven_type == ControlDriven ){
	            THREAD_CREATE(&(tasks[i].thread), data_task_routine, (void *)tasks[i].task_id);
	        }
	        else
	            continue;
		}
    }
    
#ifdef LIB_WRAPPER
    for(i=0; i<num_libwrappers; i++){
     	 printf("%s lib wrapper thread is created!\n", lib_wrappers[i].name);
         THREAD_CREATE(&(lib_wrappers[i].th), lib_wrapper_routine, (void *)i);
    }
#endif
    
    if(control_task_total_count != 0)
		while(!all_control_tasks_initiated) {}

    for(i=0; i<num_tasks; i++)
    {
        if(tasks[i].task_type != Control){
	        int create_thread = 0;

	        if(tasks[i].parent_task_id == i)    create_thread = 1;
            else                                create_thread = 0;

	        if(create_thread == 1 && tasks[i].state == Run){
	            printf("%s task thread is created!\n", tasks[i].name);

		        if(tasks[i].driven_type == TimeDriven){
                    THREAD_CREATE(&(tasks[i].thread), time_task_routine, (void *)tasks[i].task_id);
		            num_time_task++;
		        }
		        else if(tasks[i].driven_type == DataDriven || tasks[i].driven_type == ControlDriven ){
		            THREAD_CREATE(&(tasks[i].thread), data_task_routine, (void *)tasks[i].task_id);
		        }
		        else
		            continue;
			}
	    }
    }
    
    printf("--------------------------------------------\n");
    
    all_threads_created = true;
    
    glutMainLoop();
 }
##EXECUTE_TASKS_END