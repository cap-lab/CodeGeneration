##RECEIVER_SPECIFIC_START
unsigned char re_buf[1024]= {0,};
struct sockaddr_in peeraddr;
socklen_t peeraddrlen = (socklen_t) sizeof(peeraddr);

THREAD_FUNC_RET_TYPE WIFIReceiverRoutine(THREAD_FUNC_ARG_TYPE pdata){
    unsigned char size; 
    int index, state=0;
    while(1)
    {
        state = select(max + 1, &readfds, NULL, NULL, NULL);
        if(state < 0)
        {
            printf("[WiFi ERROR]select FAIL\n"); fflush(stdout);
            continue;
        }

        int wifisockfd = 0;
        int valread = 0;  
        for (index = 0; index < NUM_WIFI_CONNECTION; index++)
        {
            wifisockfd = wifiSocketList[index];
           
            if(FD_ISSET(wifisockfd, &readfds) != 0)    
            { 
                valread = read(wifisockfd, &size, sizeof(unsigned char));           
                if(valread > 0)
                {                        
                    read(wifisockfd, re_buf, size);
                }             
                else if (valread == 0)
                {
                    getpeername(wifisockfd, (struct sockaddr *)&peeraddr, &peeraddrlen);
                    printf("Host disconnected, ip: %s, port: %d\n", inet_ntoa(peeraddr.sin_addr), ntohs(peeraddr.sin_port));
                    fflush(stdout);
                    close(wifisockfd);
                    wifiSocketList[index] = 0;
                    sleep(1);
                    continue;
                }
                else
                {
                    sleep(1);
                    continue;
                }         
                                    
                int lib_or_ch = (int)re_buf[0]; //because of int32_t
                unsigned char* data = &re_buf[8];
        

                if(lib_or_ch == CON_NOR_CHANNEL)
                {
                    int channel_id = (int)re_buf[4]; //because of int32_t
                    printf("[RR] channel_id from re_buf : %d\n", channel_id);
                    int channel_index = get_channel_index(channel_id);
                    printf("[RR] channel_index : %d\n", channel_index);
                    if(channels[channel_index].type == CHANNEL_TYPE_NORMAL)
                    {                      
                        int mq_length = size-(2*sizeof(int32_t));   
                        MQ_SEND(channel_index, data, mq_length);
                    }
                    else if(channels[channel_index].type == CHANNEL_TYPE_BUFFER)
                    {
                        BUF_SEND(channel_index, data, size - (2*sizeof(int32_t)));
                    }
                    else if(channels[channel_index].type == CHANNEL_TYPE_ARRAY_CHANNEL)
                    {
                        ;//??
                    }
                    else
                    {
                        ;//Error handling code
                    }
                }
                else if(lib_or_ch == CON_LIB_CHANNEL)
                {
                   	int lib_channel_id = (int)re_buf[4];

	                for(i=0; i<num_libchannels; i++)
	                {                    
	                    if(lib_channels[i].channel_id == lib_channel_id && lib_channels[i].op == 'r')
	                    {
	                        LIB_SEND(i, (unsigned char*)re_buf+8, lib_channels[i].sampleSize);
	                        break;
	                    }
	                }
                }                       
                else
                {
                    ;
                    // Error handling code
                }
            }
        }        
    }
}
##RECEIVER_SPECIFIC_END

##SENDER_SPECIFIC_START
				if(connMap[index].conn_type == WIFI_CONN)
				{							
				    for(int i = 0; i < NUM_WIFI_CONNECTION; i++)
                    {
						printf("sockfd: %d\n", wifiSocketList[i]); fflush(stdout);
                        write(wifiSocketList[i], &size, sizeof(unsigned char));
                        write(wifiSocketList[i], buf, size);
                        printf("[SR] Send! size: %d\n", size); fflush(stdout);
                    }                            
				}
##SENDER_SPECIFIC_END

##BOOL_SPECIFIC_START
	bool wifi_con = false;
##BOOL_SPECIFIC_END

##CREATE_SPECIFIC_RECEIVER_START
		if(wifi_con == false && connMap[i].conn_type == WIFI_CONN)
        {
            wifi_con = true; 
            WifiInit();
            THREAD_CREATE(&outCommThread[i], WIFIReceiverRoutine, NULL);  // because receiver #0, receiver #1, .. , and then #N(num_connMap) get Sender    
        }
##CREATE_SPECIFIC_RECEIVER_END
    