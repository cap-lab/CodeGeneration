#ifndef __TARGET_TASK_MODEL_H__
#define __TARGET_TASK_MODEL_H__

#include "pthread.h"

#define CIC_UT_THREAD_FUNC_RET_TYPE CIC_STATIC CIC_T_VOID*
#define CIC_UT_THREAD_FUNC_ARG_TYPE CIC_T_VOID*

#define CIC_T_THREAD  pthread_t
#define CIC_T_MUTEX   pthread_mutex_t
#define CIC_T_COND    pthread_cond_t
#define CIC_T_BARRIER pthread_barrier_t

#define CIC_F_MUTEX_LOCK(a)   CICMutexLock(a)
#define CIC_F_MUTEX_UNLOCK(a) CICMutexUnlock(a)

#define CIC_F_BARRIER_INIT(a, b) CICBarrierInit(a, b)
#define CIC_F_BARRIER_WRAPUP(a)  CICBarrierWrapup(a)
#define CIC_F_BARRIER_WAIT(a)    CICBarrierWait(a)

#define CIC_F_COND_WAIT(a, b)   CICCondWait(a, b)
#define CIC_F_COND_BROADCAST(a) CICCondBroadcast(a)

#define CIC_F_MUTEX_INIT(a)   CICMutexInit(a)
#define CIC_F_MUTEX_WRAPUP(a) CICMutexWrapup(a)

#define CIC_F_COND_INIT(a)    CICCondInit(a)
#define CIC_F_COND_WRAPUP(a)  CICCondWrapup(a)

#define CIC_F_SCHED_YIELD()   CICSchedYield()

#define CIC_F_THREAD_CREATE(a, b, c) CICThreadCreate(a, b, c)
#define CIC_F_THREAD_JOIN(a)         CICThreadJoin(a)
#define CIC_F_THREAD_CANCEL(a)       CICThreadCancel(a)
#define CIC_F_THREAD_EXIT()      	 CICThreadExit()
#define CIC_F_THREAD_SELF()      	 CICThreadSelf()
#define CIC_F_THREAD_EQUAL(a, b)     CICThreadEqual(a, b)

#define CIC_V_MUTEX_INIT_INLINE PTHREAD_MUTEX_INITIALIZER
#define CIC_V_COND_INIT_INLINE  PTHREAD_COND_INITIALIZER

CIC_STATIC CIC_T_VOID CICMutexLock(CIC_T_MUTEX *a){
    CIC_T_INT result=0;
 
    result = pthread_mutex_lock(a);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_mutex_lock() failed!\n");
        CIC_F_EXIT(-1);
    }
}

CIC_STATIC CIC_T_VOID CICMutexUnlock(CIC_T_MUTEX *a){
    CIC_T_INT result = 0;

    result = pthread_mutex_unlock(a);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_mutex_unlock() failed!\n");
        CIC_F_EXIT(-1);
    }
}
   
CIC_STATIC CIC_T_VOID CICCondWait(CIC_T_COND *a, CIC_T_MUTEX *b){
    CIC_T_INT result = 0;

    result = pthread_cond_wait(a, b);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_cond_wait() failed!\n");
        CIC_F_EXIT(-1);
    }
}

CIC_STATIC CIC_T_VOID CICCondBroadcast(CIC_T_COND *a){
    CIC_T_INT result = 0;

    result = pthread_cond_broadcast(a);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_cond_broadcast() failed!\n");
        CIC_F_EXIT(-1);
    }
}

CIC_STATIC CIC_T_VOID CICBarrierWait(CIC_T_BARRIER *a){
    CIC_T_INT result = 0;

    result = pthread_barrier_wait(a);
    if(result != PTHREAD_BARRIER_SERIAL_THREAD && result != 0){
        CIC_F_PRINT_STRING("pthread_barrier_wait() failed!\n");
        CIC_F_EXIT(-1);
    }
}

CIC_STATIC CIC_T_VOID CICMutexInit(CIC_T_MUTEX *a){
    CIC_T_INT result = 0;

    result = pthread_mutex_init(a, NULL);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_mutex_init() failed!\n");
        CIC_F_EXIT(-1);
    }
}

CIC_STATIC CIC_T_VOID CICMutexWrapup(CIC_T_MUTEX *a){
    CIC_T_INT result = 0;

    result = pthread_mutex_destroy(a);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_mutex_destory() failed!\n");
        CIC_F_EXIT(-1);
    }
}

CIC_STATIC CIC_T_VOID CICCondInit(CIC_T_COND *a){
    CIC_T_INT result = 0;

    result = pthread_cond_init(a, NULL);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_cond_init() failed!\n");
        CIC_F_EXIT(-1);
    }
}

CIC_STATIC CIC_T_VOID CICCondWrapup(CIC_T_COND *a){
    CIC_T_INT result = 0;

    result = pthread_cond_destroy(a);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_cond_destory() failed!\n");
        CIC_F_EXIT(-1);
    }
}

CIC_STATIC CIC_T_VOID CICBarrierInit(CIC_T_BARRIER *a, CIC_T_INT b){
    CIC_T_INT result = 0;

    result = pthread_barrier_init(a, NULL, b);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_barrier_init() failed!\n");
        CIC_F_EXIT(-1);
    }
}

CIC_STATIC CIC_T_VOID CICBarrierWrapup(CIC_T_BARRIER *a){
    CIC_T_INT result = 0;

    result = pthread_barrier_destroy(a);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_barrier_destory() failed!\n");
        CIC_F_EXIT(-1);
    }
}

CIC_STATIC CIC_T_VOID CICThreadCreate(CIC_T_THREAD *a, CIC_T_VOID *(*b)(CIC_T_VOID*), CIC_T_VOID *c){
    CIC_T_INT result = 0;

    result = pthread_create(a, NULL, b, c);
    if(result != 0){
        CIC_F_PRINT_STRING("pthread_create() failed!\n");
        CIC_F_EXIT(-1);
    }
}
 
CIC_STATIC CIC_T_VOID CICThreadJoin(CIC_T_THREAD a){
    CIC_T_VOID *b;
    pthread_join(a, &b);
}

CIC_STATIC CIC_T_VOID CICThreadCancel(CIC_T_THREAD a){
    pthread_cancel(a);
}

CIC_STATIC CIC_T_VOID CICThreadExit(){
    pthread_exit(CIC_V_NULL);
}

CIC_STATIC CIC_T_THREAD CICThreadSelf(){
    return pthread_self();
}

CIC_STATIC CIC_T_BOOL CICThreadEqual(CIC_T_THREAD th_1, CIC_T_THREAD th_2){
	CIC_T_INT ret = pthread_equal(th_1, th_2);
	if(ret != 0)	return CIC_V_TRUE;
	return CIC_V_FALSE;
}

CIC_STATIC CIC_T_VOID CICSchedYield(){
    sched_yield();
}
#endif /*__TARGET_TASK_MODEL_H_*/
