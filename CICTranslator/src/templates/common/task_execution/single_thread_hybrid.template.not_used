##TASK_VARIABLE_DECLARATION_START
CIC_VOLATILE CIC_STATIC CIC_T_BOOL channel_empty = CIC_V_FALSE;
CIC_STATIC CIC_T_BOOL exit_signal = CIC_V_FALSE;
##TASK_VARIABLE_DECLARATION_END


##TASK_ROUTINE_START

##TASK_ROUTINE_END

##EXECUTE_TASKS_START
CIC_T_BOOL IsFireable(CIC_T_INT task_index)
{
    CIC_T_INT i=0;
    CIC_T_BOOL ret = CIC_V_TRUE;
	// checking input and output size
	if(tasks[task_index].task_id == tasks[task_index].parent_task_id && tasks[task_index].state == STATE_RUN){
	    for(i=0; i<CIC_UV_NUM_PORTMAPS; i++){
	        if(addressmap[i].task_id == task_index){
	        	CIC_T_INT channel_cur_size = 0;
	        	CIC_UT_CHANNEL *channel = &channels[addressmap[i].channel_id];
	        	
	        	if(channels->type == CIC_UT_CHANNEL_TYPE_NORMAL || channels->type == CIC_UT_CHANNEL_TYPE_BUFFER){
		            if(channel->start < channel->end){
	    				channel_cur_size = (CIC_T_UINT)(channel->end - channel->start);
	   				}
				    else if(channel->start == channel->end){
				    	if(channel->is_full)		channel_cur_size = channel->max_size;
				     	else						channel_cur_size = 0;
				    }
				    else  channel_cur_size = (CIC_T_UINT)(channel->end + channel->max_size - channel->start);
		        
		            if(addressmap[i].op == 'r'){
		                if(channel_cur_size < channel->sample_size){
		                    ret = CIC_V_FALSE;
		                    break;
		                }
		            }
		            else if(addressmap[i].op == 'w'){
		                if(channel->max_size - channel_cur_size	< channel->sample_size){
		                    ret = CIC_V_FALSE;
		                    break;
		                }
		            }
	            }
	            else if(channels->type == CIC_UT_CHANNEL_TYPE_ARRAY_CHANNEL){
	            	CIC_UT_AC_AVAIL_LIST *node;
				    node = channel->avail_index_start;
				
				    if(node == CIC_V_NULL){
			    		ret = CIC_V_FALSE;
	                    break;
				    }
	            }
	        }
	    }
    }
    else		ret = CIC_V_FALSE;

    return ret;
}

CIC_STATIC CIC_T_VOID ExecuteTasks(CIC_T_VOID)
{
    CIC_T_INT i=0, complete_time_task_count=0;
    CIC_T_INT time_task_count=0, control_task_count=0;
    CIC_T_INT task_index=0;
    CIC_T_INT remain_tasks=0;
    
    CIC_T_INT *task_run_counter = (CIC_T_INT*)CIC_F_MEM_ALLOC(CIC_UV_NUM_TASKS*CIC_SIZEOF(CIC_T_INT));
    CIC_F_MEM_SET((CIC_T_VOID*)task_run_counter, 0x0, CIC_UV_NUM_TASKS*CIC_SIZEOF(CIC_T_INT));

    for(i=0; i<CIC_UV_NUM_TASKS; i++){
        if(tasks[i].task_id == tasks[i].parent_task_id && tasks[i].driven_type == TIME_DRIVEN) 		time_task_count++;
        if(tasks[i].task_id == tasks[i].parent_task_id && tasks[i].driven_type == CONTROL_DRIVEN) 	control_task_count++;
    }
    
    // TASK_INIT calls of control tasks
    for(i=0; i<CIC_UV_NUM_TASKS; i++){
    	if(tasks[i].driven_type == CONTROL_DRIVEN){
    		if(tasks[i].task_id == tasks[i].parent_task_id){
    			task_index = i;
	    		if(*tasks[task_index].PreInit != CIC_V_NULL) TASK_PREINIT;
				TASK_INIT;
			}
		}
    }
    
     // TASK_INIT calls of computational tasks
    for(i=0; i<CIC_UV_NUM_TASKS; i++){
    	if(tasks[i].driven_type != CONTROL_DRIVEN){
    		if(tasks[i].task_id == tasks[i].parent_task_id && tasks[i].state == STATE_RUN){
    			task_index = i;
    			if(*tasks[task_index].PreInit != CIC_V_NULL) TASK_PREINIT;
				TASK_INIT;
    		}
    	}
    }
    
    // Main loop
go_continue:
    while(CIC_V_TRUE){
    	// if all time-driven tasks are completed
    	if(complete_time_task_count == time_task_count)		break;
    	for(i=0; i<CIC_UV_NUM_TASKS; i++){
			task_index=i;
    		if(IsFireable(task_index)){
				if(tasks[task_index].driven_type == TIME_DRIVEN){
	                if(task_run_counter[task_index] < tasks[task_index].run_count){
	            		if(*tasks[task_index].PreGo != CIC_V_NULL) TASK_PREGO;
						TASK_GO;
						if(*tasks[task_index].PostGo != CIC_V_NULL) TASK_POSTGO;

	                	task_run_counter[task_index]++;
	                	if(task_run_counter[task_index] == tasks[task_index].run_count){
							complete_time_task_count++;
	                		tasks[task_index].state = STATE_STOP;
						}
	               	}
	            }
				else{
	            	if(*tasks[task_index].PreGo != CIC_V_NULL) TASK_PREGO;
					TASK_GO;
					if(*tasks[task_index].PostGo != CIC_V_NULL) TASK_POSTGO;
	                task_run_counter[task_index]++;
				}
			}
		}
    	if(exit_signal)	break;
    }

	while(CIC_V_TRUE){
		remain_tasks=0;
		for(i=0; i<CIC_UV_NUM_TASKS; i++){
			if(tasks[i].driven_type == DATA_DRIVEN){
				if(IsFireable(i)){
					task_index=i;

					if(*tasks[task_index].PreGo != CIC_V_NULL) TASK_PREGO;
					TASK_GO;
					if(*tasks[task_index].PostGo != CIC_V_NULL) TASK_POSTGO;

					remain_tasks++;
				}
			}
		}
		if(remain_tasks==0 || exit_signal) break;
	}

	// TASK_WRAPUP calls of control tasks
	for(i=0; i<CIC_UV_NUM_TASKS; i++){
		if(tasks[i].task_id == tasks[i].parent_task_id){
			TASK_WRAPUP;
			if(*tasks[task_index].PostWrapup != CIC_V_NULL) TASK_POSTWRAPUP;
		}
	}

	CIC_F_MEM_FREE(task_run_counter);


	// Tasks are Running
	while(CIC_V_TRUE){
#if defined(RESUME) && (RESUME==1)
		fflush(stdout);
		CIC_F_SLEEP(1); 
		resume = WaitFromGUIResume();
		if(resume == CIC_V_TRUE){
			complete_time_task_count = 0;
			goto go_continue;
		}
		else{
			break;
		}
#else
		break;
#endif

	}
    return;
}
##EXECUTE_TASKS_END

##CONTROL_RUN_TASK_START
    CIC_T_INT i=0;
    CIC_T_INT target_task_id = GetTaskId(t_name);
    for(i=0; i<CIC_UV_NUM_TASKS; i++){
        if(target_task_id == tasks[i].task_id){
            int task_id = tasks[i].task_id;
	        InitTaskChannel(task_id);
	        tasks[task_id].state = STATE_RUN;
	        CIC_F_PRINTF("Run task %s (task_id: %d)\n", tasks[task_id].name, task_id);
	        break;
        }
    }  
##CONTROL_RUN_TASK_END

##CONTROL_STOP_TASK_START
    CIC_T_INT i=0;
    if(CIC_F_STRING_COMPARE(caller_task_name, t_name) == 0){
    	CIC_T_INT task_id = GetTaskId(caller_task_name);
    	CIC_T_INT parent_task_id = tasks[task_id].parent_task_id;
        WrapupTaskChannel(parent_task_id);
        tasks[parent_task_id].state = STATE_STOP;
        PRINT("Stop a task (own)");
    }
    else{
      int target_task_id = GetTaskId(t_name);
      for(i=0; i<CIC_UV_NUM_TASKS; i++){
          if(target_task_id == tasks[i].task_id){
               CIC_T_INT task_id = tasks[i].task_id;
	           WrapupTaskChannel(task_id);
	           tasks[task_id].state = STATE_STOP;
	           CIC_F_PRINTF("Stop task %s (task_id: %d)\n", tasks[task_id].name, task_id);
	           break;
          }
      } 
    }

    return;
##CONTROL_STOP_TASK_END

##CONTROL_RESUME_TASK_START
    CIC_T_INT i=0;
    CIC_T_INT target_task_id = GetTaskId(t_name);
    
    for(i=0; i<CIC_UV_NUM_TASKS; i++){
        if(target_task_id == tasks[i].task_id){
            CIC_T_INT task_id = tasks[i].task_id;
            if(tasks[task_id].state != STATE_STOP)	tasks[task_id].state = STATE_RUN;
            CIC_F_PRINTF("Resume task %s(task_id: %d)\n", tasks[task_id].name, task_id);
            break;
        }
    } 
    return;
##CONTROL_RESUME_TASK_END

##CONTROL_SUSPEND_TASK_START
    CIC_T_INT i=0;
    
    if(CIC_F_STRING_COMPARE(caller_task_name, t_name) == 0){
        CIC_T_INT task_id = GetTaskId(caller_task_name);
        CIC_T_INT parent_task_id = tasks[task_id].parent_task_id;
        if(tasks[parent_task_id].state != STATE_STOP)	tasks[parent_task_id].state = STATE_WAIT;
        CIC_F_PRINT("Suspend a task (own)");
    }
    else{
      CIC_T_INT target_task_id = GetTaskId(t_name);
      for(i=0; i<CIC_UV_NUM_TASKS; i++){
          if(target_task_id == tasks[i].task_id){
              CIC_T_INT task_id = tasks[i].task_id;
              if(tasks[task_id].state != STATE_STOP)	 tasks[task_id].state = STATE_WAIT;
              CIC_F_PRINTF("Suspend task %s(task_id: %d)\n", tasks[task_id].name, task_id);
              break;
          }
      }  

    }
    return;
##CONTROL_SUSPEND_TASK_END
