#ifndef __TARGET_SYSTEM_MODEL_H__
#define __TARGET_SYSTEM_MODEL_H__

#include "includes.h"

#define SYSTEM_PRINTF_SUPPORT 1
#define SYSTEM_THREAD_SUPPORT 1
#define SYSTEM_STANDARD_LIB_SUPPORT 1
#define SYSTEM_MATH_SUPPORT 1

#define CIC_TYPEDEF typedef
#define CIC_CONST const
#define CIC_EXTERN extern
#define CIC_VOLATILE volatile
#define CIC_STATIC static
#define CIC_SIZEOF sizeof

#define CIC_T_INT int
#define CIC_T_UINT unsigned int
#define CIC_T_DOUBLE double
#define CIC_T_FLOAT float
#define CIC_T_CHAR char
#define CIC_T_UCHAR unsigned char
#define CIC_T_BOOL bool
#define CIC_T_ENUM enum
#define CIC_T_STRUCT struct
#define CIC_T_VOID void
#define CIC_T_LONG long
#define CIC_T_ULONG unsigned long
#define CIC_T_SHORT short
#define CIC_T_USHORT unsigned short

#define CIC_UT_BUFFER_DATA_TYPE unsigned char*

#define CIC_V_NULL NULL
#define CIC_V_TRUE true
#define CIC_V_FALSE false

#define CIC_F_SLEEP sleep
#define CIC_F_USLEEP usleep
#define CIC_F_STRING_COPY strcpy
#define CIC_F_STRING_COMPARE strcmp
#define CIC_F_STRING_CONCATENATE strcat
#define CIC_F_INTEGER_TO_STRING IntegerToString
#define CIC_F_PRINTF printf
#define CIC_F_PRINT_STRING PrintString
#define CIC_F_EXIT exit
#define CIC_F_MEM_ALLOC MemAlloc
#define CIC_F_MEM_SET memset
#define CIC_F_MEM_FREE free
#define CIC_F_MEM_COPY memcpy

CIC_STATIC CIC_T_VOID PrintString(CIC_T_CHAR* str){
	printf("%s", str);
}

CIC_STATIC CIC_UT_BUFFER_DATA_TYPE MemAlloc(CIC_T_INT size){
	CIC_UT_BUFFER_DATA_TYPE buf;
	buf = (CIC_UT_BUFFER_DATA_TYPE)malloc(size);
	return buf;
}

CIC_STATIC CIC_T_VOID IntegerToString(CIC_T_CHAR* buf, CIC_T_INT val){
	sprintf(buf, "%d", val);
}

#endif /*__TARGET_SYSTEM_MODEL_H__*/
