// You SHOULD NOT forget to use the access modifier "static"

#define PI 3.141592654

static double cos_table[] = {
1.000000,0.999848,0.999391,0.998630,0.997564,0.996195,0.994522,0.992546,0.990268, 
0.987688,0.984808,0.981627,0.978148,0.974370,0.970296,0.965926,0.961262,0.956305, 
0.951057,0.945519,0.939693,0.933580,0.927184,0.920505,0.913545,0.906308,0.898794, 
0.891007,0.882948,0.874620,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152, 
0.809017,0.798635,0.788011,0.777146,0.766044,0.754710,0.743145,0.731354,0.719340, 
0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.629320,0.615661,0.601815, 
0.587785,0.573576,0.559193,0.544639,0.529919,0.515038,0.500000,0.484810,0.469472, 
0.453990,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.342020,0.325568, 
0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648, 
0.156434,0.139173,0.121869,0.104528,0.087156,0.069756,0.052336,0.034899,0.017452, 
-0.000000,-0.017452,-0.034900,-0.052336,-0.069757,-0.087156,-0.104529,-0.121869, 
-0.139173,-0.156435,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819, 
-0.275637,-0.292372,-0.309017,-0.325568,-0.342020,-0.358368,-0.374607,-0.390731, 
-0.406737,-0.422618,-0.438371,-0.453991,-0.469472,-0.484810,-0.500000,-0.515038, 
-0.529919,-0.544639,-0.559193,-0.573577,-0.587785,-0.601815,-0.615662,-0.629320, 
-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.719340,-0.731354, 
-0.743145,-0.754710,-0.766044,-0.777146,-0.788011,-0.798636,-0.809017,-0.819152, 
-0.829038,-0.838671,-0.848048,-0.857167,-0.866025,-0.874620,-0.882948,-0.891007, 
-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.933580,-0.939693,-0.945519, 
-0.951057,-0.956305,-0.961262,-0.965926,-0.970296,-0.974370,-0.978148,-0.981627, 
-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.998630, 
-0.999391,-0.999848,-1.000000,-0.999848,-0.999391,-0.998630,-0.997564,-0.996195, 
-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.974370, 
-0.970296,-0.965926,-0.961262,-0.956305,-0.951056,-0.945519,-0.939693,-0.933580, 
-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891006,-0.882948,-0.874620, 
-0.866025,-0.857167,-0.848048,-0.838670,-0.829037,-0.819152,-0.809017,-0.798635, 
-0.788011,-0.777146,-0.766044,-0.754709,-0.743145,-0.731354,-0.719340,-0.707107, 
-0.694658,-0.681998,-0.669131,-0.656059,-0.642788,-0.629320,-0.615661,-0.601815, 
-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.500000,-0.484810, 
-0.469471,-0.453990,-0.438371,-0.422618,-0.406737,-0.390731,-0.374606,-0.358368, 
-0.342020,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951, 
-0.207912,-0.190809,-0.173648,-0.156434,-0.139173,-0.121869,-0.104528,-0.087156, 
-0.069756,-0.052336,-0.034899,-0.017452,0.000000,0.017453,0.034900,0.052336, 
0.069757,0.087156,0.104529,0.121869,0.139173,0.156435,0.173648,0.190809,0.207912, 
0.224951,0.241922,0.258819,0.275637,0.292372,0.309017,0.325568,0.342020,0.358368, 
0.374607,0.390731,0.406737,0.422618,0.438371,0.453991,0.469472,0.484810,0.500000, 
0.515038,0.529919,0.544639,0.559193,0.573577,0.587785,0.601815,0.615662,0.629321, 
0.642788,0.656059,0.669131,0.681998,0.694658,0.707107,0.719340,0.731354,0.743145, 
0.754710,0.766045,0.777146,0.788011,0.798636,0.809017,0.819152,0.829038,0.838671, 
0.848048,0.857167,0.866026,0.874620,0.882948,0.891007,0.898794,0.906308,0.913546, 
0.920505,0.927184,0.933580,0.939693,0.945519,0.951057,0.956305,0.961262,0.965926, 
0.970296,0.974370,0.978148,0.981627,0.984808,0.987688,0.990268,0.992546,0.994522, 
0.996195,0.997564,0.998630,0.999391,0.999848};


static double sin_table[] = {
0.000000,0.017452,0.034899,0.052336,0.069756,0.087156,0.104528,0.121869,0.139173, 
0.156434,0.173648,0.190809,0.207912,0.224951,0.241922,0.258819,0.275637,0.292372, 
0.309017,0.325568,0.342020,0.358368,0.374607,0.390731,0.406737,0.422618,0.438371, 
0.453991,0.469472,0.484810,0.500000,0.515038,0.529919,0.544639,0.559193,0.573576, 
0.587785,0.601815,0.615662,0.629320,0.642788,0.656059,0.669131,0.681998,0.694658, 
0.707107,0.719340,0.731354,0.743145,0.754710,0.766044,0.777146,0.788011,0.798636, 
0.809017,0.819152,0.829038,0.838671,0.848048,0.857167,0.866025,0.874620,0.882948, 
0.891007,0.898794,0.906308,0.913545,0.920505,0.927184,0.933580,0.939693,0.945519, 
0.951057,0.956305,0.961262,0.965926,0.970296,0.974370,0.978148,0.981627,0.984808, 
0.987688,0.990268,0.992546,0.994522,0.996195,0.997564,0.998630,0.999391,0.999848, 
1.000000,0.999848,0.999391,0.998630,0.997564,0.996195,0.994522,0.992546,0.990268, 
0.987688,0.984808,0.981627,0.978148,0.974370,0.970296,0.965926,0.961262,0.956305, 
0.951056,0.945519,0.939693,0.933580,0.927184,0.920505,0.913545,0.906308,0.898794, 
0.891006,0.882948,0.874620,0.866025,0.857167,0.848048,0.838671,0.829038,0.819152, 
0.809017,0.798635,0.788011,0.777146,0.766044,0.754710,0.743145,0.731354,0.719340, 
0.707107,0.694658,0.681998,0.669131,0.656059,0.642788,0.629320,0.615661,0.601815, 
0.587785,0.573576,0.559193,0.544639,0.529919,0.515038,0.500000,0.484810,0.469471, 
0.453990,0.438371,0.422618,0.406737,0.390731,0.374607,0.358368,0.342020,0.325568, 
0.309017,0.292372,0.275637,0.258819,0.241922,0.224951,0.207912,0.190809,0.173648, 
0.156434,0.139173,0.121869,0.104528,0.087156,0.069756,0.052336,0.034899,0.017452, 
-0.000000,-0.017452,-0.034900,-0.052336,-0.069757,-0.087156,-0.104529,-0.121869, 
-0.139173,-0.156435,-0.173648,-0.190809,-0.207912,-0.224951,-0.241922,-0.258819, 
-0.275637,-0.292372,-0.309017,-0.325568,-0.342020,-0.358368,-0.374607,-0.390731, 
-0.406737,-0.422618,-0.438371,-0.453991,-0.469472,-0.484810,-0.500000,-0.515038, 
-0.529919,-0.544639,-0.559193,-0.573577,-0.587785,-0.601815,-0.615662,-0.629321, 
-0.642788,-0.656059,-0.669131,-0.681998,-0.694658,-0.707107,-0.719340,-0.731354, 
-0.743145,-0.754710,-0.766044,0.777146,-0.788011,-0.798636,-0.809017,-0.819152, 
-0.829038,-0.838671,-0.848048,-0.857167,-0.866025,-0.874620,-0.882948,-0.891007, 
-0.898794,-0.906308,-0.913545,-0.920505,-0.927184,-0.933580,-0.939693,-0.945519, 
-0.951057,-0.956305,-0.961262,-0.965926,-0.970296,-0.974370,-0.978148,-0.981627,	
-0.984808,-0.987688,-0.990268,-0.992546,-0.994522,-0.996195,-0.997564,-0.998630, 
-0.999391,-0.999848,-1.000000,-0.999848,-0.999391,-0.998630,-0.997564,-0.996195, 
-0.994522,-0.992546,-0.990268,-0.987688,-0.984808,-0.981627,-0.978148,-0.974370, 
-0.970296,-0.965926,-0.961262,-0.956305,-0.951056,-0.945519,-0.939693,-0.933580, 
-0.927184,-0.920505,-0.913545,-0.906308,-0.898794,-0.891006,-0.882948,-0.874620, 
-0.866025,-0.857167,-0.848048,-0.838670,-0.829037,-0.819152,-0.809017,-0.798635, 
-0.788011,-0.777146,-0.766044,-0.754709,-0.743145,-0.731354,-0.719340,-0.707107, 
-0.694658,-0.681998,-0.669131,-0.656059,-0.642788,-0.629320,-0.615661,-0.601815, 
-0.587785,-0.573576,-0.559193,-0.544639,-0.529919,-0.515038,-0.500000,-0.484809, 
-0.469471,-0.453990,-0.438371,-0.422618,-0.406736,-0.390731,-0.374606,-0.358368, 
-0.342020,-0.325568,-0.309017,-0.292372,-0.275637,-0.258819,-0.241922,-0.224951, 
-0.207912,-0.190809,-0.173648,-0.156434,-0.139173,-0.121869,-0.104528,-0.087156, 
-0.069756,-0.052336,-0.034899,-0.017452};



 
LIBFUNC(void, init, void) {
  //.. something to do for initialization
}
 
LIBFUNC(void, wrapup, void) {
  //.. something to do for finalization
}

LIBFUNC(double, my_log, double num)
{
    double temp_1=0.0;
    double temp_2=0.0;
    double intermediate=0.0;
    double result=0.0;
    int i=0;

    if(num <= 0)
        result = -1.0;
    else if(num == 1)
        result =  0.0;
    else
    {
        temp_1 = (num - 1) / (num + 1);
        temp_2 = temp_1 * temp_1;
        intermediate = 1;

        for(i = 500; i > 0; i--)
        {
            intermediate = (1/((2*(double)i)-1)) + (temp_2 * intermediate);
        }

        result = 2 * temp_1 * intermediate;
    }

    return result;
}

LIBFUNC(double, my_exp, double num)
{
    double result=1.0;
    int i=0;

    if(num == 0)
        result = 1.0;
    else
    {
        for(i = 500; i > 0; i--)
        {
            result = 1 + ((1/(double)i) * num * result);
        }
    }
    return result;
}

LIBFUNC(double, my_pow, double num_1, double num_2)
{
    int i=0;
    double result = 1.0;

    if(num_1 == 0 && num_2 < 0)
        result = 0.0;

    else if(num_2 == 0)
        result = 0.0;

    else
    {
        double t_num_1 = 0.0;

        if(num_1 < 0)
        {
            t_num_1 = -num_1;
            num_2 = (double)((int)num_2);
        }
        else
            t_num_1 = num_1;

        if(num_2 == (double)((int)num_2))
        {
            for(i=0; i<(int)num_2; i++)
            {
                if(num_2 < 0)
                    result /= num_1;
                else
                    result *= num_1;
            }
        }
        else
        {
            double lnx = LIBCALL(this, my_log, t_num_1);
            for(i=500; i>0; i--)
            {
                result *= (1.0 / (double)i) * lnx * num_2;
                result += 1.0;
            }

            if(num_1 < 0)
                if((int)num_2 % 2 == 1)
                    result *= -1;
        }
    }
    return result;
}

LIBFUNC(double, my_sin, double num)
{
	int lower_bound=0;
	int upper_bound=0;

	double decimal=0.0;
	double slope=0.0;
	double result=0.0;

 	num = (num*180)/PI;

	if(num == (double)((int)num))
	{
		upper_bound = (int)(num) % 360;
		lower_bound = upper_bound;
	}
	else
	{
		lower_bound = (int)(num) % 360;
		upper_bound = lower_bound + 1;
	}

	if(num == (double)((int)num))
	{
		result = sin_table[upper_bound];
	}
	else 
	{
		slope = sin_table[upper_bound] - sin_table[lower_bound];
		decimal = num - (double)((int)num);
		result = sin_table[lower_bound] + (decimal * slope);
	}
	//printf("num : %lf upper : %d, lower : %d slope : %lf decimal : %.2lf\n", num, upper_bound, lower_bound, slope, decimal);

	return result;
	
}

LIBFUNC(double, my_cos, double num)
{
	int lower_bound=0;
	int upper_bound=0;

	double decimal=0.0;
	double slope=0.0;
	double result=0.0;

 	num = (num*180)/PI;

	if(num == (double)((int)num))
	{
		upper_bound = (int)(num) % 360;
		lower_bound = upper_bound;
	}
	else
	{
		lower_bound = (int)(num) % 360;
		upper_bound = lower_bound + 1;
	}

	if(num == (double)((int)num))
	{
		result = cos_table[upper_bound];
	}
	else 
	{
		slope = cos_table[upper_bound] - cos_table[lower_bound];
		decimal = num - (double)((int)num);
		result = cos_table[lower_bound] + (decimal * slope);
	}

	return result;

}

LIBFUNC(double, my_tan, double num)
{
	double sin = LIBCALL(this, my_sin, num);
	double cos = LIBCALL(this, my_cos, num);

	return sin/cos;
}
